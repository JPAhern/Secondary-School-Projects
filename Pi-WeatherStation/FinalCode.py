#This is the code which controls our Raspberry Pi Weather Station
#This code is based in Python
#This weather station measures atmospheric pressure, tempeture, and humidity
#This program must be activated in the command prompt 

#This imports tools which will allow us to use the SenseHat
from sense_hat import SenseHat
#This imports tools which will allow us to find the current date and time
from datetime import datetime
#This imports tools which will allow us to creat a timed delay in our code
import time
#This imports tools which will allow us to send an email from this code
import smtplib

#This will connect our program to gmail
server = smtplib.SMTP("smtp.gmail.com", 587)
#This will begin the program's search for our gmail account
server.starttls()
#This will tell the program which gmail account to connect to
server.login("jccodingtest@gmail.com", "jccoding")
#This variable will be used to creat a timer for when to send the email
email = 0

#This creates the variable sense and tells it to use the SenseHat
sense = SenseHat()

#This creates the variable that we will use to callabrate our themometor
temp_cal = 10

#This defines a selection of colours
r = (255, 0, 0) #Red
g = (139, 183, 16) #Green
o = (250, 148, 0) #Orange
b = (53, 61, 221) #Blue

#This is the template to make the entire LED screne red
R = [
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
    r, r, r, r, r, r, r, r,
]

#This is the template to make the entire LED screne green
G = [
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
    g, g, g, g, g, g, g, g,
]

##This is the template to make the entire LED screne orange
O = [
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
    o, o, o, o, o, o, o, o,
]

#This resets "sense" each time the program is activated
sense.clear()

#This creates a file which allows us to store our sensor data
p = open("WeatherResults.dat", "w")

#This will create an infinite loop which will constently update and run variables and sensors
while True:
#This section containes the main code for our sensors
    #This creates a variable which will be constantly updated with data from the pressure sensor on the SenseHat
    pressure = sense.get_pressure()
    #This rounds the data from the pressure sensor to one decimal place, which makes the data easier to read as we had no need for ten decimal places of data
    pressure = round(pressure, 1)
    
    #This will update at the beginning of each loop in order to account for the Pi's internal tempeture rising
    #THe while loop will stop after twenty five cycles which is the approximate point we opserved at which the Pi stops drastically increasing in tempeture
    while temp_cal < 15:
        #This variable will calabrate the tempeture sensor to the Pi's internal tempeture at the beginning of the program
        temp_cal = temp_cal++0.2
    #This creates a variable which will be constantly updated with data from the temperature sensor on the SenseHat
    temp = sense.get_temperature()
    #This rounds the data from the temperature sensor to one decimal place, which makes the data easier to read as we had no need for ten decimal places of data
    temp = round(temp, 1)
    #This calibrates for the diffrence in temperature created by heat generated by all our electronics
    #This also tells the computer that the variable "temp" is an integer
    temp = float(temp - temp_cal)
    
    #This creates a variable which will be constantly updated with data from the humidity sensor on the SenseHat
    humidity = sense.get_humidity()
    #This rounds the data from the humidity sensor to one decimal place, which makes the data easier to read as we had no need for ten decimal places of data
    #This also tells the computer that the variable "humidity" is a real number
    humidity = float(round(humidity, 1))
    #This will callabrate the humidity sensor to met eireann information
    humidity = humidity + 42.2
    
#This will give us the Heat Index
##The Heat Index is how warm it feels based on the tempeture and the humidity
    #To find the Heat Index we must convert from Celsius to Fahrenheit
    #F is equal to Fahrenheit
    F = (1.8*temp)+32
    #The following, very long, formula outputs the Heat Index based on the variables "F" and "humidity"
    heatindex = -42.379+(2.04901523*F)+(10.14333127*humidity)-(0.22475541*F*humidity)-(6.83783*(10**-3)*(F**2))-(5.481717*(10**-2)*(humidity**2))+(1.22874*(10**-3)*(F**2)*humidity)+(8.5282*(10**-4)*F*(humidity**2))-(1.99*(10**-6)*(F**2)*(humidity**2))
    #This converts the result back to celsius
    heatindex = round((heatindex-32)/1.8, 1)
    
#This creates a variable, containing the current time and date and is constently updated
    #Date = Day/Month/Year
    #Time = Hour:Minute:Second
    t = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    

#This structures the data we recieve in Time, Pressure, Temperature, Humidity, and Heat Index
    #Time includes current time and date based on the RaspberryPi's clock
    #Pressure is measured and recorded in hectoPascal (hPa)
        #1 hectopascal is equal to 1 millibar
    #Temperature is measured and recorded in degrees Celsius (C)
    #Humidity is measured and recorded in Percentage of Air (%)
    #Heat Index( or real feel tempeture) is measured and recorded in degrees Celsius (C)
    data = "{} {} {} {} {}\n".format(t,pressure,temp,humidity,heatindex)
    
    #This creates a string that will contain our readings to be displayed on the LED screen
    LED = "Current Temperature {}C Relative Humidity {}% Pressure {}hPa Real Feel Tempeture {}C".format(temp,humidity,pressure,heatindex)
    #This will display our current readings on the LED screen
    #It takes arround 34 seconds to run through this which I will take into accountfor the final time.sleep
    sense.show_message(LED, text_colour=b, scroll_speed=0.05)
    
    #This will creat a delay of an hour for when to sen an email
    while email >= 60:
        #This will tell the program where to send the email
        server.sendmail("jcccodingtest@gmail.com", "jordanahern12@gmail.com", LED)
        #This will exit email
        server.quit
        #This will reset the timer
        email = 0
    #If it has not been an hour this will activate
    else:
        #This will advance the timer
        email = email ++ 1
    
    
#This section will output basic warning signals (the function of this can be proven by reduing requirements in diffrent statement, but will easily break if every statement is not considered
##All numbers are place holders and may not line up with genneral standerds as that information is not easy to find
    #This if statement will activate if the tempeture is equal to or more than 65 degrees Celsius
        #or if the tempeture is less than or equal to -15 degrees Celsius
    if temp >= 65 or temp <= -15:
        #This will make the LED screen turn red
        sense.set_pixels(R)
    #This if statement will activate if the tempeture is equal to or greater than 35 degrees Celsius but less than 65 degrees Celsius
        #or if the tempeture is less than 0 degrees Celsius but greater than -15 degrees Celsius
    if temp >= 35 and temp < 65 or temp < 0 and temp > -15:
        #This will make the LED screen turn orange
        sense.set_pixels(O)
    #This will activate under "normal" circumstances
    else:
        #This will make the LED screen turn green
        sense.set_pixels(G)
    
    
#This section logs our data
    #This begins logging our data
    p.write(data)
    #This creats a delay
    #time.sleep(S), were S = seconds
    #This must be the delay I want-34seconds to account for the time it takes to display information on the LED screen
    time.sleep(26)
    #This stops data being loged when completed
    #Which signals that the currecnt loop has completed its opperation and allows a new opperation to begin
p.close
